splitLines = require 'split-lines'
marked = require('marked')
fs = require 'fs'
http = require 'http'
sockjs = require 'sockjs'
httpPort = 3000

inputPath = process.argv[2]
if inputPath[0] == '/'
  filePath = inputPath
else
  filePath = [ process.cwd(), process.argv[2] ].join '/'

console.log "Watching #{filePath}"
ss = sockjs.createServer()
sendFile = null
fs.watchFile filePath, interval: 200, -> sendFile() if sendFile?

lastContent = null

firstDiff = (contentLines) ->
  return 0 unless lastContent?
  lastContentLines = splitLines lastContent
  currentLine = -1
  found = false
  while contentLines.length > ++currentLine && !found
    if lastContentLines.length < currentLine
      found = true
    else
      found = contentLines[currentLine] != lastContentLines[currentLine]
  if found then currentLine else 0

ss.on 'connection', (conn) ->
  sendFile = ->
    mdFile = fs.readFile filePath, 'utf-8', (e, content) ->
      unless content == lastContent
        lines = splitLines content
        diffLine = firstDiff lines
        output = marked content
        conn.write JSON.stringify
          output: output
          diffLine: diffLine
          totalLines: lines.length
        lastContent = content
  sendFile()

s = http.Server (req, res) ->
  console.log req.url
  if req.url == '/browser.js'
    fs.createReadStream(__dirname + '/browser.js').pipe res
  else if req.url == '/css'
    fs.createReadStream(__dirname + '/octicons.css').pipe res
  else
    fs.createReadStream(__dirname + '/index.html').pipe res
ss.installHandlers s, prefix: '/markdown'
s.listen httpPort, (e) ->
  if e?
    console.log e
  else
    console.log "Preview markdown at localhost:#{httpPort}"
